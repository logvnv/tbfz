""" –ú–æ–¥—É–ª—å –∫–ª–∞—Å—Å–∞ Queue """

import json
import socket
from requests.exceptions import ReadTimeout
from dialog import Dialog
import pymysql
from datetime import datetime

import db_config

GREETINGS_TEXT = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëã\
\n\n–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Çü§ñ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ \
–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞—à–µ–º –∑–∞–≤–æ–¥–µüè≠.\n\n–ú—ã —Å–∞–º–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è, –µ—Å–ª–∏ –∑–∞–ø—Ä–∏–º–µ—Ç–∏–º \
—á—Ç–æ-—Ç–æ –Ω–µ–ª–∞–¥–Ω–æ–µü§®. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π "/state", \
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ —Ç–µ–±–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\
\n\n‚ö†–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞ \
–∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /sub. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ \
—Å—Ç–∞–Ω–∫–∏ 1, 2 –∏ 3 –∏—Å–ø–æ–ª—å–∑—É–π:\n\t/sub 1 2 3\
\n–ï—Å–ª–∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—à—å –∑–∞ –∫–∞–∫–æ–µ-—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è \
–æ—Ç –Ω–µ–≥–æ–∏—Å–ø–æ–ª—å–∑—É—è /unsub.'

HELP_TEXT = '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n\
üëâ/state - –£–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã. \n\
üëâ/sub - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: /sub 1 2 3).\n\
üëâ/unsub - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: /unsub 1 2 3).\n\
üëâ/start - –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n\
üëâ/help - –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'


class Queue():
    """ –ö–ª–∞—Å—Å –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–±–æ–µ–≤
    –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–µ–Ω –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫, –æ–Ω–∏ –Ω–µ –ø—Ä–∏–π–¥—É—Ç –µ–º—É
    —Å—Ä–∞–∑—É, –Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏
    –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π """

    def __init__(self, tele_bot, n=10, ip="127.0.0.1", port=9090):
        self.bot = tele_bot
        self.dialogs = []
        self.offset = 0
        updates = self.bot.get_updates(timeout=1)
        if len(updates) > 0:
            self.offset = updates[-1].update_id + 1

        self.states = {}


        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # self.reasons = ['–ü—Ä–∏—á–∏–Ω–∞1', '–ü—Ä–∏—á–∏–Ω–∞2']

        self.reasons = {}
        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
        with connection.cursor() as cursor:
            sql = "SELECT failure_cause_id, category FROM failure_cause";
            cursor.execute(sql)
            for row in cursor.fetchall():
                self.reasons[row[1]] = row[0]
        connection.close()
        

        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server.bind((ip, port))
        self.server.listen(n)

    def add_dialog(self, machine_id, machine_name, sboi_id):
        """ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ –Ω–æ–≤–æ–º—É —Å–ª—É—á–∞—é —Å–±–æ—è """
        # –í—ã—á–∏—Å–ª–∏—Ç—å –ª—é–¥–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–æ–∫ —á–µ—Ä–µ–∑ –±–¥
        # user_ids = [1266388430, ]
        user_ids = []
        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
        with connection.cursor() as cursor:
            sql = "SELECT telegram_id FROM worktime LEFT JOIN worker USING(worker_id) WHERE machine_id = (%s);"
            cursor.execute(sql, (machine_id,))
            for row in cursor.fetchall():
                user_ids.append(row[0])
        connection.close()
        user_ids = set(user_ids)

        for user_id in user_ids:
            dialog = Dialog(self.bot, user_id, machine_id, machine_name, sboi_id)
            if user_id not in [d.user_id for d in self.dialogs]:
                dialog.start()
            self.dialogs.append(dialog)

    def update(self):
        """ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª. –°–ª—É—à–∞–µ–º –¥–∞—Ç—á–∏–∫–∏,
        –°–ª—É—à–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        while True:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ —Å–±–æ–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            self.__listen_to_sensors()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = self.__get_telegram_updates()

            for update in updates:
                user_id = str(update.message.from_user.id)
                msg_text = ''
                try:
                    msg_text = update.message.text.strip()
                except AttributeError:
                    self.bot.send_message(user_id, '–û–±—ã–¥–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–µ \
–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \
/help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã.',
                                          reply_markup=json.dumps({
                                              'keyboard': [['/help']],
                                              'resize_keyboard': True}))

                if msg_text.startswith('/'):
                    self.__comand_handler(user_id, msg_text[1:])
                    continue

                if not self.__conversation(user_id, msg_text):
                    #print(msg_text)
                    self.bot.send_message(user_id, '–û–±—ã–¥–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–µ \
–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \
/help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã.',
                                          reply_markup=json.dumps({
                                              'keyboard': [['/help']],
                                              'resize_keyboard': True}))

            used_user_ids = []
            for dialog in self.dialogs:
                if dialog.user_id not in used_user_ids:
                    used_user_ids.append(dialog.user_id)
                    if dialog.state == 0:
                        dialog.start()

    def __listen_to_sensors(self):
        """ –°–ª—É—à–∞–µ–º –¥–∞—Ç—á–∏–∫–∏ """
        self.server.settimeout(1)
        try:
            clientsock, _ = self.server.accept()
            self.server.settimeout(None)
            data = clientsock.recv(1024).decode()
            machine_id = data[1:]
            state = data[0]
            machine_name = None
            
            connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
            with connection.cursor() as cursor:
                sql = "SELECT machine_name FROM machine WHERE `machine_id` = (%s);"
                cursor.execute(sql, (machine_id,))
                machine_name = cursor.fetchone()[0]
            connection.close()

            if state == 'i':
                print("–ü–æ–ª—É—á–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ –Ω–∞ –º–∞—à–∏–Ω–µ ‚Ññ{}.".format(
                    machine_id))
                # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                # id —Å–±–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                sboi_id = None
                cur_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                

                connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
                with connection.cursor() as cursor:
                    sql = "INSERT INTO failure (machine_id, `time`) VALUES ((%s),(%s));"
                    cursor.execute(sql, (machine_id, cur_time))
                    connection.commit()

                    sql = "SELECT failure_id FROM failure WHERE `machine_id` = (%s) AND `time` = (%s);"
                    cursor.execute(sql, (machine_id, cur_time))
                    sboi_id = cursor.fetchone()[0]
                connection.close()
                  
                self.add_dialog(machine_id, machine_name, sboi_id)
                self.states[machine_name] = False
            elif state == 'a':
                print("–ü–æ–ª—É—á–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–∞—à–∏–Ω—ã ‚Ññ{}.".format(
                    machine_id))
                self.states[machine_name] = True

            clientsock.send(bytes("ok", 'UTF-8'))
        except socket.timeout:
            self.server.settimeout(None)

    def __get_telegram_updates(self):
        """ –°–ª—É—à–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º """
        updates = []
        try:
            updates = self.bot.get_updates(offset=self.offset, timeout=5)
        except ReadTimeout:
            print('Exception happened: ReadTimeout')

        if len(updates) != 0:
            self.offset = updates[-1].update_id + 1

        return updates

    def __comand_handler(self, user_id, msg_text):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—â–∏–µ—Å—è —Å / """
        worker_id = None
        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
        with connection.cursor() as cursor:
            sql = "SELECT worker_id FROM worker WHERE telegram_id = (%s)"
            cursor.execute(sql, (user_id,))
            worker_id = cursor.fetchone()[0]
        connection.close()

        if msg_text.lower() == 'start':
            self.bot.send_message(user_id, GREETINGS_TEXT,
                                  reply_markup=json.dumps({
                                      'keyboard': [['/state']],
                                      'resize_keyboard': True}))
        elif msg_text.lower() == 'help':
            self.bot.send_message(user_id, HELP_TEXT,
                                  reply_markup=json.dumps({
                                      'keyboard': [['/state']],
                                      'resize_keyboard': True}))
        elif msg_text.lower() == 'state':
            # –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—à–∞—é—â–∏–º
            #n_sensors = ['1', '3', '7', '100']
            sensor_names = []
            connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
            with connection.cursor() as cursor:
                sql = "SELECT machine_name FROM worktime LEFT JOIN worker USING(worker_id) LEFT JOIN machine USING(machine_id) WHERE telegram_id = (%s)"
                cursor.execute(sql, (user_id,))
                for row in cursor.fetchall():
                    sensor_names.append(row[0])
            connection.close()

            states = {}
            for name in sensor_names:
                states[name] = (self.states[name] if name in self.states.keys()
                             else False)

            if len(states) > 0:
                self.bot.send_message(user_id, str(states)[1:-1].replace(
                    ', ', '\n').replace(
                        'True', '–†–∞–±–æ—Ç–∞–µ—Ç').replace(
                            'False', '–ü—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç'))
            else:
                self.bot.send_message(user_id, "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏–∫–∞–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\
–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /sub 1 2 3, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 1, 2 –∏ 3.")

        elif msg_text.lower().startswith('sub') and msg_text.lower().split()[0] == 'sub':
            sensors = msg_text.split()[1:]
            good_sensors = []
            if len(sensors) > 0:
                connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
                with connection.cursor() as cursor:
                    sql = "SELECT * FROM machine"
                    cursor.execute(sql)
                    data = cursor.fetchall()
                    machines = {machine_id: machine_name for machine_id, machine_name in data}
                    for sensor in sensors:
                        if sensor in machines.values():
                            machine_id = list(machines.keys())[list(machines.values()).index(sensor)]
                            try:
                                sql = "INSERT INTO worktime (worker_id, machine_id) VALUES ((%s),(%s))"
                                cursor.execute(sql, (worker_id, machine_id))
                                connection.commit()
                                good_sensors.append(sensor)
                            except pymysql.err.IntegrityError:
                                pass
                connection.close()
                self.bot.send_message(user_id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\
 —Å –Ω–æ–º–µ—Ä–∞–º–∏ {}.'.format(good_sensors),
                                      reply_markup=json.dumps({
                                          'keyboard': [['/state']],
                                          'resize_keyboard': True}))
            else:
                self.bot.send_message(user_id, '–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\
 \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sub n1 n2 ..., –≥–¥–µ ni - –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ\
 –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.')
        elif msg_text.lower().startswith('unsub') and msg_text.lower().split()[0] == 'unsub':
            if msg_text.lower().split()[0] != 'unsub':
                return
            sensors = msg_text.split(' ')[1:]
            good_sensors = []
            if len(sensors) > 0:
                connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
                with connection.cursor() as cursor:
                    sql = "SELECT * FROM machine"
                    cursor.execute(sql)
                    data = cursor.fetchall()
                    machines = {machine_id: machine_name for machine_id, machine_name in data}
                    for sensor in sensors:
                        if sensor in machines.values():
                            machine_id = list(machines.keys())[list(machines.values()).index(sensor)]
                            try:
                                sql = "DELETE FROM worktime WHERE worker_id = (%s) AND machine_id = (%s)"
                                cursor.execute(sql, (worker_id, machine_id))
                                connection.commit()
                                good_sensors.append(sensor)
                            except pymysql.err.IntegrityError:
                                pass
                connection.close()
                self.bot.send_message(user_id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\
 —Å –Ω–æ–º–µ—Ä–∞–º–∏ {}.'.format(good_sensors),
                                      reply_markup=json.dumps({
                                          'keyboard': [['/state']],
                                          'resize_keyboard': True}))
            else:
                self.bot.send_message(user_id, '–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\
 \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsub n1 n2 ..., –≥–¥–µ ni - –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ\
 –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.')
        else:
            self.bot.send_message(user_id, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\
\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \
/help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã.',
                                  reply_markup=json.dumps({
                                      'keyboard': [['/help']],
                                      'resize_keyboard': True}))

    def __conversation(self, user_id, msg_text):
        """ –í–µ–¥–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ª–æ–≥–∞ """
        worker_id = None
        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
        with connection.cursor() as cursor:
            sql = "SELECT worker_id FROM worker WHERE telegram_id = (%s)"
            cursor.execute(sql, (user_id,))
            worker_id = cursor.fetchone()[0]
        connection.close()

        answered = False
        for i, dialog in enumerate(self.dialogs):
            if dialog.user_id == user_id:
                answered = True
                if dialog.state == 1:
                    if msg_text.lower() == '–Ω–µ—Ç':
                        self.bot.send_message(user_id, '–ù–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç.',
                                              reply_markup=json.dumps({
                                                  'keyboard': [['/state']],
                                                  'resize_keyboard': True}))
                        del self.dialogs[i]
                    elif msg_text.lower() == '–¥–∞':
                        dialog.ask(self.reasons.keys())
                    else:
                        self.bot.send_message(user_id,
                                              '–ù–µ –ø–æ–Ω—è–ª... –î–∞ –∏–ª–∏ –Ω–µ—Ç?',
                                              reply_markup=json.dumps({
                                                  'keyboard':
                                                  [['–î–∞'], ['–ù–µ—Ç']],
                                                  'resize_keyboard': True,
                                                  'one_time_keyboard': True}))
                elif dialog.state == 2:
                    if msg_text.lower() in [r.lower() for r in self.reasons]:

                        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
                        with connection.cursor() as cursor:
                            reason_id = self.reasons[list(self.reasons.keys())[[r.lower() for r in self.reasons].index(msg_text.lower())]]
                            sql = "UPDATE failure SET worker_id = (%s), failure_cause_id = (%s) WHERE failure_id = (%s);"
                            cursor.execute(sql, (worker_id, reason_id , dialog.sboi_id))
                            connection.commit()
                        connection.close()

                        self.bot.send_message(user_id,
                                              '–°–ø–∞—Å–∏–±–æ, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏.',
                                              reply_markup=json.dumps({
                                                  'keyboard': [['/state']],
                                                  'resize_keyboard': True}))
                        del self.dialogs[i]
                    else:
                        connection = pymysql.connect(db_config.DB_HOST, db_config.DB_USER_NAME, db_config.DB_PASSWORD, db_config.DB_NAME)
                        with connection.cursor() as cursor:
                            sql = "UPDATE failure SET worker_id = (%s), description = (%s) WHERE failure_id = (%s);"
                            cursor.execute(sql, (worker_id, msg_text, dialog.sboi_id))
                            connection.commit()
                        connection.close()

                        dialog.state = 3
                        self.bot.send_message(user_id, '–¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º.',
                                              reply_markup=json.dumps({
                                                  'keyboard': [['/state']],
                                                  'resize_keyboard': True}))
                        del self.dialogs[i]
                break
        return answered
